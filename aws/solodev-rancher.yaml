AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS Rancher Cluster (ECS, ALB, RDS)'
Parameters:
  ClientName:
    Default: rancher-hub
    Description: Name of client
    Type: String
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  KeyName:
    Default: ''
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  MinimumCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster
  MaximumCapacity:
    Type: Number
    Default: '4'
    Description: Number of instances to launch in your ECS cluster
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of instances to launch in your ECS cluster
  AsgMaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of instances that can be launched in your ECS cluster
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of an existing subnets in the selected Virtual Private
      Cloud.
  WebServerPort:
    Description: TCP/IP port of the web server
    Type: String
    Default: '80'
  SSHFrom:
    Description: >-
      Lockdown SSH access to the bastion host (default can be accessed from
      anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m3.medium
    AllowedValues:
      - m3.medium
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  StorageVolumeSize:
    Default: '50'
    Description: Size of Storage EBS Volume used as Storage.
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
  DBName:
    Default: cattle
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUsername:
    Default: rancher
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Default: password
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBPort:
    Default: '3306'
    Description: Database Port
    Type: Number
  DBClass:
    Default: db.t2.small
    Description: Database instance class
    Type: String
    AllowedValues:
      - db.t2.small
      - db.m1.small
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
    ConstraintDescription: must select a valid database instance type.
  MultiAZDatabase:
    Default: 'true'
    Description: Create a multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-ba722dc0
    us-east-2:
      AMI: ami-832b0ee6
    us-west-1:
      AMI: ami-dd104dbd
    us-west-2:
      AMI: ami-022b9262
    eu-west-1:
      AMI: ami-a7f2acc1
    eu-west-2:
      AMI: ami-3fb6bc5b
    eu-central-1:
      AMI: ami-ec2be583
    ap-northeast-1:
      AMI: ami-c393d6a4
    ap-southeast-1:
      AMI: ami-a88530cb
    ap-southeast-2:
      AMI: ami-8af8ffe9
    ca-central-1:
      AMI: ami-ead5688e
Resources:
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds: !Ref Subnets
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - DBSubnetGroup
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - ContainerSecurityGroup
    Properties:
      GroupDescription: Open database for access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref ContainerSecurityGroup
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - RDSSecurityGroup
  DB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref DBName
      MultiAZ: !Ref MultiAZDatabase
      DBInstanceIdentifier: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - RDS
      AllocatedStorage: !Ref DBAllocatedStorage
      BackupRetentionPeriod: '7'
      PreferredBackupWindow: '01:30-03:00'
      PreferredMaintenanceWindow: 'sat:04:00-sat:05:30'
      DBInstanceClass: !Ref DBClass
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt 
          - RDSSecurityGroup
          - GroupId
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - RDS
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - ECS
  ECSAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: !Ref MinimumCapacity
      MaxSize: !Ref MaximumCapacity
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - ECS-instance
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ContainerSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref StorageVolumeSize
            DeleteOnTermination: 'true'
      UserData: !Base64 
        'Fn::Sub': >
          #!/bin/bash

          yum install -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack
          ${AWS::StackName} --resource ECSLaunchConfiguration

          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack
          ${AWS::StackName} --resource ECSAutoScalingGroup
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub 'echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config'
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 256
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack
                ${AWS::StackName} --resource ECSLaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: !Sub '${AWS::StackName}-ECSRole-${AWS::Region}'
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": { 
                    "Service": "ec2.amazonaws.com" 
                }
            }]
        }
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "ecs:CreateCluster",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:StartTelemetrySession",
                        "ecs:Submit*",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:BatchGetImage",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken"
                    ],
                    "Resource": "*"
                }]
            }
  ECSInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole
        
  ECSServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'ec2:Describe*'
                  - 'ecs:Describe*'
                  - 'ecs:List*'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                Resource: '*'
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow inbound access to the ELB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - ELBSecurityGroup
  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - ELB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '700'
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Ref Subnets
  ContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Associate this group with container instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHFrom
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '2376'
          ToPort: '2376'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '9346'
          ToPort: '9346'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '9345'
          ToPort: '9345'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
  RancherTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      Matcher:
        HttpCode: 200-299
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '700'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '1860'
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - RancherTargetGroup
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId
  RancherListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: ECSRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RancherTargetGroup
      LoadBalancerArn: !Ref ECSALB
      Port: '8080'
      Protocol: HTTP
  RancherListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: RancherListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref RancherTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref RancherListener
      Priority: 2
  RancherService:
    Type: 'AWS::ECS::Service'
    DependsOn: RancherListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: rancher
      DesiredCount: !Ref DesiredCapacity
      LoadBalancers:
        - ContainerName: rancher
          ContainerPort: 8080
          TargetGroupArn: !Ref RancherTargetGroup
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref RancherTaskDefinition
  CloudwatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join 
        - '-'
        - - ECSLogGroup
          - !Ref 'AWS::StackName'
      RetentionInDays: 14
  RancherTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - rancher
      ContainerDefinitions:
        - Name: rancher
          Cpu: '0'
          Essential: 'true'
          Image: 'rancher/server:latest'
          Memory: '750'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: rancher
          PortMappings:
            - HostPort: 8080
              ContainerPort: 8080
            - HostPort: 9345
              ContainerPort: 9345
          EntryPoint:
            - /usr/bin/entry
            - '--advertise-address'
            - awslocal
          Environment:
            - Name: CATTLE_DB_CATTLE_MYSQL_HOST
              Value: !GetAtt 
                - DB
                - Endpoint.Address
            - Name: CATTLE_DB_CATTLE_MYSQL_PORT
              Value: !Ref DBPort
            - Name: CATTLE_DB_CATTLE_MYSQL_NAME
              Value: !Ref DBName
            - Name: CATTLE_DB_CATTLE_USERNAME
              Value: !Ref DBUsername
            - Name: CATTLE_DB_CATTLE_PASSWORD
              Value: !Ref DBPassword
      Volumes: []
Outputs:
  ECSCluster:
    Value: !Ref ECSCluster
  CNAME:
    Description: >-
      URL for admin login.  URL to use as CNAME for DNS. Please point all CNAME
      dns entries to this URL.
    Value: !GetAtt 
      - ECSALB
      - DNSName
