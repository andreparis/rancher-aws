Description: >
    This template deploys a Lambda function that will generate the required config.yaml for 
    RKE to be able to manage the hosts of a working Rancher cluster.

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    AutoScalingGroup:
      Description: The AutoScalingGroup that the EC2 cluster is deployed to
      Type: String

    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
      Type: String

    InstanceUser:
      Type: String
      Default: 'ec2-user'
      Description: Name of admin user for instance (ec2-user for example)

    FQDN:
      Type: String
      Description: Fully qualified URL for using app.  DNS of FQDN must be pointed to CNAME of ALB.

    rkeS3Bucket:
      Type: String
      Description: A reference to the S3 bucket for rke

    rkeUserPem:
      Type: String
      Description: A reference to the PEM ile for rke-user
    
Resources:

  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - 
          Endpoint: !GetAtt 
            - LifecycleExecuteRKE
            - Arn
          Protocol: lambda
    DependsOn: LifecycleExecuteRKE

  InstanceTerminatingHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: '900'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !Ref NotificationTopic
      RoleARN: !GetAtt 
        - AutoscalingNotificationRole
        - Arn
    DependsOn: NotificationTopic

  InstanceActivatingHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: '900'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
      NotificationTargetARN: !Ref NotificationTopic
      RoleARN: !GetAtt 
        - AutoscalingNotificationRole
        - Arn
    DependsOn: NotificationTopic

  AutoscalingNotificationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: lambda-inline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'autoscaling:CompleteLifecycleAction'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceAttribute'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:DescribeHosts'
                  - 'ecs:ListContainerInstances'
                  - 'ecs:SubmitContainerStateChange'
                  - 'ecs:SubmitTaskStateChange'
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:UpdateContainerInstancesState'
                  - 'ecs:ListTasks'
                  - 'ecs:DescribeTasks'
                  - 'sns:Publish'
                  - 'sns:ListSubscriptions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Join ['', ['arn:aws:s3:::', !Ref 'rkeS3Bucket', /*]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LifecycleExecuteRKE
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref NotificationTopic

  LifecycleExecuteRKE:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          CLUSTER: !Ref AutoScalingGroup
          KeyName: !Ref KeyName
          InstanceUser: !Ref InstanceUser
          rkeS3Bucket:  !Ref rkeS3Bucket
          FQDN: !Ref FQDN
          instancePEM: !Ref rkeUserPem
      Handler: rke.run
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Code: 
        S3Bucket: !Ref rkeS3Bucket
        S3Key: 'S3initRKE.zip'
      Runtime: python3.6
      Timeout: 300
    DependsOn: ExecuteS3InitRKE

  ExecuteLifecycleExecuteRKE:
    Type: 'Custom::ExecuteLifecycleExecuteRKE'
    Properties:
      ServiceToken: !GetAtt LifecycleExecuteRKE.Arn
      Region: !Ref 'AWS::Region'