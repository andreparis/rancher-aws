Description: >
    This template deploys a Lambda function that will generate the required config.yaml for 
    RKE to be able to manage the hosts of a working Rancher cluster.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    AutoScalingGroup:
        Description: The AutoScalingGroup that the EC2 cluster is deployed to
        Type: String

    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        Type: String

    InstanceUser:
        Type: String
        Default: 'ec2-user'
        Description: Name of admin user for instance (ec2-user for example)

    FQDN:
        Type: String
        Description: Fully qualified URL for using app.  DNS of FQDN must be pointed to CNAME of ALB.
    
Resources:

  rkeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref 'EnvironmentName', 'rke']]
      AccessControl: 'BucketOwnerFullControl'
      Tags:
        -
          Key: 'Name'
          Value: !Join ['-', [!Ref 'EnvironmentName', 'S3']]
    DeletionPolicy: Delete

  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - 
          Endpoint: !GetAtt 
            - LifecycleExecuteRKE
            - Arn
          Protocol: lambda
    DependsOn: LifecycleExecuteRKE

  InstanceTerminatingHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: '900'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !Ref NotificationTopic
      RoleARN: !GetAtt 
        - AutoscalingNotificationRole
        - Arn
    DependsOn: NotificationTopic

  InstanceActivatingHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: '900'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
      NotificationTargetARN: !Ref NotificationTopic
      RoleARN: !GetAtt 
        - AutoscalingNotificationRole
        - Arn
    DependsOn: NotificationTopic

  AutoscalingNotificationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: lambda-inline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'autoscaling:CompleteLifecycleAction'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceAttribute'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:DescribeHosts'
                  - 'ecs:ListContainerInstances'
                  - 'ecs:SubmitContainerStateChange'
                  - 'ecs:SubmitTaskStateChange'
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:UpdateContainerInstancesState'
                  - 'ecs:ListTasks'
                  - 'ecs:DescribeTasks'
                  - 'sns:Publish'
                  - 'sns:ListSubscriptions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Join ['', ['arn:aws:s3:::', !Ref 'rkeS3Bucket', /*]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'

  S3InitRKE:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          rkeS3Bucket:  !Ref rkeS3Bucket
          S3initRKE: 'https://github.com/techcto/S3initRKE/archive/master.zip'
          lambdaZip: 'master.zip'
      Code:
        ZipFile: !Join 
          - ''
          - - |
              'use strict';

              const AWS = require('aws-sdk'); 
              const s3 = new AWS.S3();
              const https = require('https');
              const fs = require('fs');

              exports.handler = (event, context, callback) => {
                console.log(JSON.stringify(event));

                var rkeZip = fs.createWriteStream('/tmp/'+process.env.lambdaZip);
                var rkeZipRequest = https.get(process.env.S3initRKE, function(rkeZipResponse) {
                  rkeZipResponse.pipe(rkeZip);
                  console.log("downloaded RKE lambda");

                  fs.readFile('/tmp/'+process.env.lambdaZip, function (err, data) {
                    if (err) { throw err; }

                    var base64data = new Buffer(data, 'binary');

                    s3.putObject({
                      Bucket: process.env.rkeS3Bucket,
                      Key: process.env.lambdaZip,
                      Body: base64data
                    },function (resp) {
                      console.log(arguments);
                      console.log('Successfully uploaded package.');
                    });

                  });
                });
              };
      Handler: index.handler
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs6.10
      Timeout: 30

  ExecuteS3InitRKE:
		Type: 'Custom::ExecuteS3InitRKE'
    Properties:
      ServiceToken: !GetAtt S3InitRKE.Arn
      Region: !Ref "AWS::Region"

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LifecycleExecuteRKE
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref NotificationTopic

  LifecycleExecuteRKE:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          CLUSTER: !Ref AutoScalingGroup
          KeyName: !Ref KeyName
          InstanceUser: !Ref InstanceUser
          rkeS3Bucket:  !Ref rkeS3Bucket
      Handler: rke.run
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Code: 
        S3Bucket: !Ref rkeS3Bucket
        S3Key: "master.zip"
      Runtime: python3.6
      Timeout: 30
    DependsOn: ExecuteS3InitRKE