Description: >
    This template deploys a Lambda function that will generate the required config.yaml for 
    RKE to be able to manage the hosts of a working Rancher cluster.

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    AutoScalingGroup:
      Description: The AutoScalingGroup that the EC2 cluster is deployed to
      Type: String

    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
      Type: String

    InstanceUser:
      Type: String
      Default: 'rke-user'
      Description: Name of admin user for instance (rke-user for example)

    FQDN:
      Type: String
      Description: Fully qualified URL for using app.  DNS of FQDN must be pointed to CNAME of ALB.

    RancherBucket:
      Type: String
      Description: A reference to the S3 bucket for rke

    LambdaExecutionRole:
      Type: String
      Description: A reference to the lambda execution role

    CodeBuildProjectName:
      Type: String
      Description: Name of codebuild project used for running rke

    Status:
      Type: String
      Default: 'update'

    
Resources:

  InstanceTerminatingHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: '900'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !Ref NotificationTopic
      RoleARN: !GetAtt 
        - AutoscalingNotificationRole
        - Arn
    DependsOn: NotificationTopic

  InstanceActivatingHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: '900'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
      NotificationTargetARN: !Ref NotificationTopic
      RoleARN: !GetAtt 
        - AutoscalingNotificationRole
        - Arn
    DependsOn: NotificationTopic

  AutoscalingNotificationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LifecycleExecuteRKE
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref NotificationTopic

  LifecycleExecuteRKE:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          ProjectName: !Ref CodeBuildProjectName
          Cluster: !Ref AutoScalingGroup
          KeyName: !Ref KeyName
          InstanceUser: !Ref InstanceUser
          Bucket:  !Ref RancherBucket
          Status: !Ref Status
          FQDN: !Ref FQDN
      Role: !Ref LambdaExecutionRole
      Code:
          ZipFile: !Join 
          - ''
          - - |
              import boto3,os

              def run(event, context):
                print('Starting a new build ...')
                print(os.environ)
                codebuild = boto3.client('codebuild')

                # set up our codebuild start_build args
                start_args = {
                    'projectName': os.environ['ProjectName'],
                    'environmentVariablesOverride':[
                        {'name': 'Cluster', 'value': os.environ['Cluster']},
                        {'name': 'InstanceUser', 'value': os.environ['InstanceUser']},
                        {'name': 'Bucket', 'value': os.environ['Bucket']},
                        {'name': 'FQDN', 'value': os.environ['FQDN']},
                        {'name': 'Status', 'value': os.environ['Status']}
                    ]
                }

                response = codebuild.start_build(**start_args)
                build_id = response['build']['id']
                logger.info('--Build ID = %s', build_id)
                
              # return the build ID
              return build_id
      Handler: index.run
      Runtime: python3.6
      Timeout: 30

  # LifecycleExecuteRKE:
  #   Type: 'AWS::Lambda::Function'
  #   Properties:
  #     Environment:
  #       Variables:
  #         Cluster: !Ref AutoScalingGroup
  #         KeyName: !Ref KeyName
  #         InstanceUser: !Ref InstanceUser
  #         Bucket:  !Ref RancherBucket
  #         Clean: False
  #         FQDN: !Ref FQDN
  #     Handler: app.run
  #     Role: !Ref LambdaExecutionRole
  #     Code: 
  #       S3Bucket: !Ref RancherBucket
  #       S3Key: 'rke-runner.zip'
  #     Runtime: python3.6
  #     Timeout: 300

  ExecuteLifecycleExecuteRKE:
    Type: 'Custom::ExecuteLifecycleExecuteRKE'
    Properties:
      ServiceToken: !GetAtt LifecycleExecuteRKE.Arn
      Region: !Ref 'AWS::Region'

  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - 
          Endpoint: !GetAtt 
            - LifecycleExecuteRKE
            - Arn
          Protocol: lambda
    DependsOn: ExecuteLifecycleExecuteRKE