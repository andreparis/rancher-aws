Description: >
    This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
    via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters: 

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    LoadBalancer:
        Description: The VPC that the ECS cluster is deployed to
        Type: String
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    ServiceRole:
        Description: The Application Load Balancer Service Role
        Type: String

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers: 
                - ContainerName: "nginx-proxy"
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: nginx-proxy
            ContainerDefinitions:
                - Name: nginx-proxy
                  Essential: true
                  Image: jwilder/nginx-proxy:latest
                  Memory: 200
                  Environment:
                    - Name: ECS_GEN_CLUSTER
                      Value: !Ref 'EnvironmentName'
                    - Name: ECS_GEN_REGION
                      Value: !Ref AWS::Region
                  PortMappings:
                    - HostPort: 80
                      ContainerPort: 80
                    - HostPort: 443
                      ContainerPort: 443
                  MountPoints: 
                    - 
                      SourceVolume: "docker-socket"
                      ContainerPath: "/tmp/docker.sock"
                      ReadOnly: true
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: nginx-proxy
            Volumes: 
              -
                Host:
                  SourcePath: "/var/run/docker.sock"
                Name: "docker-socket"

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 14  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            TargetGroupAttributes:
              - Key: deregistration_delay.timeout_seconds
                Value: '20'
              - Key: stickiness.type
                Value: lb_cookie
              - Key: stickiness.enabled
                Value: 'true'
              - Key: stickiness.lb_cookie.duration_seconds
                Value: '1860'
            Name: !Join 
              - '-'
              - - !Ref 'EnvironmentName'
                - ECSTG

    Listener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: '80'
            Protocol: HTTP
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
